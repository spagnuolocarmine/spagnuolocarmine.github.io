<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://spagnuolocarmine.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://spagnuolocarmine.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-01-23T08:26:30+00:00</updated><id>https://spagnuolocarmine.github.io/feed.xml</id><title type="html">blank</title><subtitle>The personal homepage of Carmine Spagnuolo. </subtitle><entry><title type="html">Architetture Distribuite per il Cloud (ADC) @ Universit√† degli Studi di Salerno</title><link href="https://spagnuolocarmine.github.io/blog/2021/adc/" rel="alternate" type="text/html" title="Architetture Distribuite per il Cloud (ADC) @ Universit√† degli Studi di Salerno"/><published>2021-11-22T00:00:00+00:00</published><updated>2021-11-22T00:00:00+00:00</updated><id>https://spagnuolocarmine.github.io/blog/2021/adc</id><content type="html" xml:base="https://spagnuolocarmine.github.io/blog/2021/adc/"><![CDATA[<h2 id="table-of-contents">Table of contents</h2> <ul> <li><a href="#table-of-contents">Table of contents</a></li> <li><a href="#referents">Referents</a></li> <li><a href="#online-labs-organization">Online labs organization</a></li> <li><a href="#homework">Homework</a> <ul> <li><a href="#design-your-solution">Design your solution</a></li> <li><a href="#prerequisites">Prerequisites</a></li> <li><a href="#evaluation-criteria">Evaluation criteria</a> <ul> <li><a href="#scores">Scores</a></li> </ul> </li> <li><a href="#homework-list">Homework list</a></li> <li><a href="#homework-descriptions">Homework Descriptions</a> <ul> <li><a href="#1-anonymous-chat">1 Anonymous Chat</a></li> <li><a href="#2-git-protocol">2 Git Protocol</a></li> <li><a href="#3-auction-mechanism">3 Auction Mechanism</a></li> <li><a href="#4-sudoku-game">4 Sudoku Game</a></li> <li><a href="#5-semantic-harmony-social-network">5 Semantic Harmony Social Network</a></li> </ul> </li> <li><a href="#develop-your-solution-java-dependencies">Develop your solution (Java dependencies)</a></li> <li><a href="#give-me-homework-now">Give me Homework now!</a></li> </ul> </li> <li><a href="#Ô∏è-homework-submission">‚ö†Ô∏è Homework Submission</a> <ul> <li><a href="#homework-tips-">Homework TIPS üé≥</a></li> </ul> </li> </ul> <h2 id="referents">Referents</h2> <ul> <li>Prof. Alberto Negro (Fundamentals and Algorithms for Distributed Systems).</li> <li>Prof. Gennaro Cordasco (Peer-to-Peer Networks).</li> <li>Ph.D. Carmine Spagnuolo (Laboratory).</li> </ul> <h2 id="online-labs-organization">Online labs organization</h2> <ul> <li>Join our Discord ISISLab‚Äô community to be supported in your homework. <ul> <li><a href="https://discord.gg/BTt5fUp"><img src="https://img.shields.io/badge/Discord-%23adc-7289da.svg?style=flat-square&amp;logo=discord" alt="w:300"/></a> (classes category).</li> <li>When you enter in our server, please write to Carmine Spagnuolo for asking a Master Student role (this will ensure you to access to the channels, is required).</li> </ul> </li> <li><a href="https://github.com/spagnuolocarmine/distributedsystems-unisa">GitHub class repository</a></li> </ul> <h2 id="homework">Homework</h2> <h3 id="design-your-solution">Design your solution</h3> <p>Projects must be developed using Java languages (also, using <a href="https://maven.apache.org/">Apache Maven</a> as software project management) and <a href="https://tomp2p.net/">TomP2P</a> framework/library. TomP2P is a DHT with additional features, such as storing multiple values for a key. Each peer has a table (either disk-based or memory-based) to keep its values. A single value can be queried/updated with a secondary key. The underlying communication framework uses Java NIO to handle many concurrent connections.</p> <h3 id="prerequisites">Prerequisites</h3> <ul> <li>Concurrent and Object-oriented programming fundamentals (Threads and Observer patterns are required).</li> <li>Distributed System fundamental (Distributed Hash Tables, DHT is required).</li> <li>Java 7 or greater.</li> <li>Apache Maven.</li> <li>Eclipse (optional).</li> </ul> <h3 id="evaluation-criteria">Evaluation criteria</h3> <p>Homework are evaluated on a range of 30 total points. The final score is diveded in four level:</p> <ul> <li><strong>A</strong> [30-28]</li> <li><strong>B</strong> [27-25]</li> <li><strong>C</strong> [24-22]</li> <li><strong>D</strong> [21-18]</li> </ul> <h4 id="scores">Scores</h4> <ul> <li><strong>Correctness</strong>. 0 to 10 points. It measures the group‚Äôs commitment to developing a compliant solution with the problem requirement (obviously!). But also a solution that solves part of the problem can be evaluated if it is clear that only a minor part of the problem is not correctly solved.</li> <li><strong>Style</strong>. 0 to 5 points. It measures the group‚Äôs commitment to developing a solution, styling it, and exploiting all TomP2P and Java 7 or greater features, paying attention to using the fundamental part and DHT arguments.</li> <li><strong>Innovation</strong>. 0 to 5 points. It measures the group‚Äôs commitment to developing additional features to provide more similar applications to real ones.</li> <li><strong>Dockerization</strong>. 0 to 5 points. It measures the group‚Äôs commitment to dockerizing the application (converting the application solution to run within a Docker container). Will be evaluated the application usability and the Docker features exploited.</li> <li><strong>Tools</strong>. 0 to 5 points. Correct use of Maven and JUnit.</li> </ul> <h3 id="homework-list">Homework list</h3> <p>Each homework is presented with a Java interface API that must be implemented by a solution (the API is available in the folder challenges).</p> <p>Five projects to be developed on a P2P Network:</p> <ol> <li><em>Anonymous Chat</em></li> <li><em>Git Protocol</em></li> <li><em>Auction Mechanism</em></li> <li><em>Sudoku Game</em></li> <li><em>Semantics Harmony Social Network</em></li> </ol> <ul> <li><em>Publish/Subscribe Protocol</em> (<a href="https://github.com/spagnuolocarmine/p2ppublishsubscribe">example project</a>)</li> </ul> <p>Each project must also be deployed on a Docker container that allows the users to execute the application peer quickly. The application parameters can be easily managed using the Docker environment variables. The project <strong>must</strong> provide a command-line interface that exploits all functionalities developed and tested.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ docker run -i -e MASTERIP="127.0.0.1" -e ID=0 homework-docker --name MASTER-PEER
$ docker run -i -e MASTERIP="172.17.0.2" -e ID=1 homework-docker --name GENERIC-PEER
</code></pre></div></div> <h3 id="homework-descriptions">Homework Descriptions</h3> <h4 id="1-anonymous-chat">1 Anonymous Chat</h4> <p><img src="https://s3.amazonaws.com/lowres.cartoonstock.com/telecommunications-chatting-chatroom-chatting_over_the_fence-neighbour-gossip-gri0032_low.jpg" alt="chat" align="right" width="300px"/></p> <p>Design and develop an anonymous chat API based on P2P Network. Each peer can send messages on a public chat room in an anonymous way. The system allows the users to create a new room, join in a room, leave a room, and send messages. As described in the <a href="https://github.com/spagnuolocarmine/distributedsystems-unisa/blob/master/homework/AnonymousChat.java">AnonymousChat Java API</a>.</p> <p>¬†</p> <p>¬†</p> <p>¬†</p> <p>¬†</p> <p>¬†</p> <p>¬†</p> <p>¬†</p> <h4 id="2-git-protocol">2 Git Protocol</h4> <p><img src="https://i2.wp.com/makingbones.files.wordpress.com/2013/02/picture12.jpg" alt="git" align="left" width="300px"/></p> <p>Design and develop the Git protocol, distributed versioning control on a P2P network. Each peer can manage its projects (a set of files) using the Git protocol (a minimal version). The system allows the users to create a new repository in a specific folder, add new files to be tracked by the system, apply the changing on the local repository (commit function), push the network‚Äôs changes, and pull the changing from the network. The git protocol has lot-specific behavior to manage the conflicts; in this version, it is only required that if there are some conflicts, the systems can download the remote copy, and the merge is manually done. As described in the <a href="https://github.com/spagnuolocarmine/distributedsystems-unisa/blob/master/homework/GitProtocol.java">GitProtocol Java API</a>.</p> <p>¬†</p> <p>¬†</p> <p>¬†</p> <p>¬†</p> <h4 id="3-auction-mechanism">3 Auction Mechanism</h4> <p><img src="https://s3.amazonaws.com/lowres.cartoonstock.com/law-order-online_auction-blackmarket-black_market-website-stolen_good-bmun149_low.jpg" alt="auction" align="right" width="300px"/></p> <p>Design and develop an auction mechanism based on P2P Network. Each peer can sell and buy goods using second-price Auctions (eBay). Second-price auction is a non-truthful auction mechanism for multiple items. Each bidder places a bid. The highest bidder gets the first slot, the second-highest, the second slot, and so on, but the highest bidder pays the price bid by the second-highest bidder, the second-highest pays the price bid by the third-highest, and so on. The systems allow the users to create new auction (with an ending time, a reserved selling price, and a description), check the status of an auction, and eventually place a new bid for an auction. As described in the <a href="https://github.com/spagnuolocarmine/distributedsystems-unisa/blob/master/homework/AuctionMechanism.java">AuctionMechanism Java API</a>.</p> <p>¬†</p> <p>¬†</p> <p>¬†</p> <h4 id="4-sudoku-game">4 Sudoku Game</h4> <p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/220px-Sudoku-by-L2G-20050714.svg.png" alt="sudoku" align="left" width="300px"/></p> <p>Design and develop a Sudoku challenge game on a P2P network. Each user can place a number of the sudoku game; if it is not already placed takes 1 point, if it is already placed and it is rights take 0 points, in other case receive -1 point. The games are based on a 9 x 9 matrix. All users that play to a game are automatically informed when a user increment its score and when the game is finished. The system allows the users to generate (automatically) a new Sudoku challenge identified by a name, join in a challenge using a nickname, get the integer matrix describing the Sudoku challenge, and place a solution number. As described in the <a href="https://github.com/spagnuolocarmine/distributedsystems-unisa/blob/master/homework/SudokuGame.java">SudokuGame Java API</a>.</p> <p>¬†</p> <p>¬†</p> <p>¬†</p> <h4 id="5-semantic-harmony-social-network">5 Semantic Harmony Social Network</h4> <p><img src="https://s3.amazonaws.com/lowres.cartoonstock.com/media-social_media-interests-compatibility-dates-social_networks-jsh120327_low.jpg" alt="social-network" align="right" width="300px"/></p> <p>Design and develop a social network based on the user‚Äôs interests that exploits a P2P Network. The system collects the profiles of the users and automatically creates friendships according to a matching strategy. The users can see their friends over time and are automatically informed when a user enters the social network and becomes a new potential friend. The system defines a set of questions, for instance, if the user like or not like a set of photos, a set of a hashtag, or more accurate as Big Five Personality Test. At this point, the system can compute the user scoring according to the answers. This scoring is elaborated by a matching strategy that automatically finds out the friends. Consider, for instance, a binary answers vector; a matching process should be the difference in 0 and 1, or the Hamming distance, and so on. The system allows the users to see the social network questions, create a profile score according to the answer, join in the network using a nickname, and eventually see all user friends. As described in the <a href="https://github.com/spagnuolocarmine/distributedsystems-unisa/blob/master/homework/SemanticHarmonySocialNetwork.java">SemanticHarmonySocialNetwork Java API</a>.</p> <p>¬†</p> <p>¬†</p> <p>¬†</p> <hr/> <h3 id="develop-your-solution-java-dependencies">Develop your solution (Java dependencies)</h3> <p>Using Maven, you can add the dependencies to TomP2P in the pom.xml file. For more details, please look at the <a href="https://github.com/spagnuolocarmine/p2ppublishsubscribe">example project</a>.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;repositories&gt;
    &lt;repository&gt;
        &lt;id&gt;tomp2p.net&lt;/id&gt;
         &lt;url&gt;http://tomp2p.net/dev/mvn/&lt;/url&gt;
     &lt;/repository&gt;
&lt;/repositories&gt;
&lt;dependencies&gt;
   &lt;dependency&gt;
     &lt;groupId&gt;net.tomp2p&lt;/groupId&gt;
     &lt;artifactId&gt;tomp2p-all&lt;/artifactId&gt;
      &lt;version&gt;5.0-Beta8&lt;/version&gt;
   &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre></div></div> <h3 id="give-me-homework-now">Give me Homework now!</h3> <p>Compute the MD5 of your carminespagnuolo,namesurname <code class="language-plaintext highlighter-rouge">md5(namesurname-D)</code>, where <em>namesurname</em> is your Name and Surname concatenation, and D is birthday day (only the first number <strong>01</strong>/01/2020).</p> <ul> <li>The first character in the <a href="https://www.md5online.org/">MD5</a> is your homework index, according the following conversion table (use case insentive):</li> </ul> <table> <thead> <tr> <th>Character</th> <th>Value</th> </tr> </thead> <tbody> <tr> <td>a-g-m-s-y-f-4</td> <td>1</td> </tr> <tr> <td>b-h-n-t-z-l-5</td> <td>2</td> </tr> <tr> <td>c-i-o-u-r-0-6</td> <td>3</td> </tr> <tr> <td>d-j-p-v-x-1-7</td> <td>4</td> </tr> <tr> <td>e-k-q-w-3-2-8-9</td> <td>5</td> </tr> </tbody> </table> <p><strong>Example</strong> Team Wonderland, team member Alice your assignment is <em>wonderlandalice31</em>, <code class="language-plaintext highlighter-rouge">md5(wonderlandalice-31)=cce384455fc37671fb467c3f5d43e560</code>, that is solve the <em>Auction Mechanism</em>.</p> <h2 id="Ô∏è-homework-submission">‚ö†Ô∏è Homework Submission</h2> <ul> <li>Submission Process ‚¨áÔ∏è <ul> <li>üóÑÔ∏è Create a new project. <ul> <li><code class="language-plaintext highlighter-rouge">repository_name</code> = <code class="language-plaintext highlighter-rouge">name_surname_adc_2021</code></li> </ul> </li> <li>üìù Design your repository using the same project‚Äôs structure of <a href="https://github.com/spagnuolocarmine/p2ppublishsubscribe">example project</a> üòÑ.</li> <li>üìò <code class="language-plaintext highlighter-rouge">README.md</code> must contain a description of your repository and your solution (will be evaluated).</li> <li>üìß Send a mail to cspagnuolo+ADC2021@unisa.it with attached the project‚Äô compressed file before the exam date (official ESSE3) and writing in the object‚Äôs mail your name and the exam date (e.g., Alice Wonderland 01/12/2021). <strong>Please be sure that you follow this instruction</strong></li> <li>Add also the string used to compute the Homework ID.</li> </ul> </li> </ul> <h3 id="homework-tips-">Homework TIPS üé≥</h3> <p>Solutions must be a Java Maven project that implements the problem API and includes, at minimum, one test case written using JUnit (unit test case for Java). Each project must consist of a README file, written in Markdown, in the project‚Äôs root. The README describes the faced project, briefly the project solution, and eventually test cases.</p> <p>The <em>test case</em> must instantiate the network (with a minimum of four peers) and simulates all operations described in the problem description. Solutions that fail the test cases or do not test all features are considered NOT CORRECT and are evaluated, considering that they cannot have the maximum score.</p> <p><a href="#table-of-contents">‚Üë Back to Index ‚Üë</a></p>]]></content><author><name></name></author><category term="teaching"/><summary type="html"><![CDATA[Table of contents]]></summary></entry><entry><title type="html">AAMAS Conference Paper</title><link href="https://spagnuolocarmine.github.io/blog/2020/aamas/" rel="alternate" type="text/html" title="AAMAS Conference Paper"/><published>2020-09-25T00:00:00+00:00</published><updated>2020-09-25T00:00:00+00:00</updated><id>https://spagnuolocarmine.github.io/blog/2020/aamas</id><content type="html" xml:base="https://spagnuolocarmine.github.io/blog/2020/aamas/"><![CDATA[<h2 id="a-design-methodology-for-epidemic-dynamics-via-time-varying-hypergraphs">A Design-Methodology for Epidemic Dynamics via Time-Varying Hypergraphs</h2> <p><a href="https://aamas2020.conference.auckland.ac.nz">Proceedings of International Conference on Autonomous Agents and Multi-Agent Systems 2020</a></p> <p>‚¨áÔ∏è <strong>Downloads</strong></p> <p><a href="http://www.ifaamas.org/Proceedings/aamas2020/pdfs/p61.pdf"><img src="https://img.shields.io/badge/PDF-red" alt="h:30"/></a> <a href="https://raw.githubusercontent.com/spagnuolocarmine/spagnuolocarmine.github.io/master/assets/files/share/aamas'20.pdf"><img src="https://img.shields.io/badge/Slide-Extended-gree" alt="h:30"/></a> <a href="mailto:cspagnuolo@unisa.it"><img src="https://img.shields.io/badge/üìß-cspagnuolo%40unisa.it-green" alt="h:30"/></a></p> <p><img src="https://raw.githubusercontent.com/spagnuolocarmine/spagnuolocarmine.github.io/master/assets/files/share/tvg_example.png" alt="working_chart"/></p> <p>üëÄ <strong>Abstract</strong></p> <p>In epidemiology science, the importance to explore innovative modeling tools for acutely analyzing epidemic diffusion is turning into a big challenge considering the myriad of real-world aspects to capture. Typically, equation-based models, such as SIS and SIR, are used to study the propagation of diseases over a population. Improved approaches also include human-mobility patterns as network information to describe contacts among individuals. However, there still is the need to incorporate in these models information about different types of contagion, geographical information, humans habits, and environmental properties.</p> <p>In this paper, we propose a novel approach that takes into account: 1. direct and indirect epidemic contagion pathways to explore the dynamics of the epidemic, 2. the times of possible contagions, and 3. human-mobility patterns. We combine these three features exploiting <em>time-varying hypergraphs</em>, and we embed this model into a design-methodology for agent-based models (ABMs), able to improve the correctness in the epidemic estimations of classical contact-network approaches. We further describe a diffusion algorithm suitable for our design-methodology and adaptable to the peculiarities of any disease spreading policies and/or models.</p> <p>Finally, we tested our methodology by developing an ABM, realizing the SIS epidemic compartmental model, for simulating an epidemic propagation over a population of individuals. We experimented the model using real user-mobility data from the location-based social network <em>Foursquare</em>, and we demonstrated the high-impact of temporal direct and indirect contagion pathways.</p>]]></content><author><name></name></author></entry><entry><title type="html">My working space at time of pandemic</title><link href="https://spagnuolocarmine.github.io/blog/2020/my-working-space-at-time-of-pandemic/" rel="alternate" type="text/html" title="My working space at time of pandemic"/><published>2020-09-14T00:00:00+00:00</published><updated>2020-09-14T00:00:00+00:00</updated><id>https://spagnuolocarmine.github.io/blog/2020/my-working-space-at-time-of-pandemic</id><content type="html" xml:base="https://spagnuolocarmine.github.io/blog/2020/my-working-space-at-time-of-pandemic/"><![CDATA[<h3 id="from-marp-presenter-to---visual-studio-code-my-cruise-Ô∏è-to-increase-my-productivity">From Marp Presenter to üÜö Visual Studio Code, <em>My cruise ‚õµÔ∏è to increase my productivity</em>.</h3> <p>‚¨áÔ∏è üëÄ</p> <p><a href="http://htmlpreview.github.io/?https%3A%2F%2Fraw.githubusercontent.com%2Fspagnuolocarmine%2Fspagnuolocarmine.github.io%2Fmaster%2Fassets%2Ffiles%2Fmyworkingspace%2Fmyworkingspace.html"><img src="https://img.shields.io/badge/HTML-Live%20Preview-red" alt="h:30"/></a> <a href="https://raw.githubusercontent.com/spagnuolocarmine/spagnuolocarmine.github.io/master/assets/files/myworkingspace/myworkingspace.html"><img src="https://img.shields.io/badge/HTML-RAW-gray" alt="h:30"/></a> <a href="https://raw.githubusercontent.com/spagnuolocarmine/spagnuolocarmine.github.io/master/assets/files/myworkingspace/myworkingspace.html"><img src="https://img.shields.io/badge/Markdown-Gists-blue" alt="h:30"/></a> <a href="mailto:cspagnuolo@unisa.it"><img src="https://img.shields.io/badge/üìß-cspagnuolo%40unisa.it-green" alt="h:30"/></a></p> <p><img src="https://raw.githubusercontent.com/spagnuolocarmine/spagnuolocarmine.github.io/master/assets/files/myworkingspace/img/chart.png" alt="working_chart"/></p>]]></content><author><name></name></author></entry><entry><title type="html">MPI Find Max Example</title><link href="https://spagnuolocarmine.github.io/blog/2019/mpi-example1/" rel="alternate" type="text/html" title="MPI Find Max Example"/><published>2019-05-05T00:00:00+00:00</published><updated>2019-05-05T00:00:00+00:00</updated><id>https://spagnuolocarmine.github.io/blog/2019/mpi-example1</id><content type="html" xml:base="https://spagnuolocarmine.github.io/blog/2019/mpi-example1/"><![CDATA[<h1 id="parallel-max-of-integer-array">Parallel Max of Integer Array</h1> <ul> <li><code class="language-plaintext highlighter-rouge">mpicc mpimax.c</code></li> <li><code class="language-plaintext highlighter-rouge">mpirun -np 3 1 1000</code></li> <li>1 flag sequential execution (0 for not execute sequential code)</li> <li>10000 is the number of element in the array</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include "mpi.h"              /* MPI header file */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/time.h&gt;
#define MAX_LEN 100000   /* Max array size */

/* Usual search for largest function  */
int find_max(int a[ ],int len)
{
   int i;   
   int max; /* Current max */
   max = a[0];
   for (i=1;i&lt;len;++i)
		    if (a[i] &gt; max) max = a[i];
   return max;
}

/* Function to generate random ints  */
void generate_data (int a[ ],int len)
{
   int i;
   struct timeval time;
   /* Use time of day to get a seed */
   gettimeofday(&amp;time, (struct timezone *) 0);
   srand((int) time.tv_sec);

   for (i=0;i&lt;len;++i)
      a[i] = rand();
}

int main (int argc, char *argv[])
{
  int my_rank;  
  int rank;    /* Loop variable for the processes */
  int num_proc;     /* Total number of processes */
  int array_len;  /* Length of the main array */
  int sequential; /* Should we do sequential */
  int quotient;  /* Usual subarray size: array_len/num_proc*/
  int rem;  /* How many larger subarrays:
			                   array_len % num_proc */
  int sub_start;  /* Start of one of the subarrays */
  int sub_len;  /* Length of my subarray */
  int search_array[MAX_LEN];  /* The array to search */
  int my_max; /* Max for my subarray */
  int global_max; /* Maximum for the main array */
  int local_max; /* Local max from one process */
  MPI_Status   status;  /* status for receive */

  /* Usual startup tasks */
  MPI_Init(&amp;argc, &amp;argv);     
  MPI_Comm_rank(MPI_COMM_WORLD,&amp;my_rank);
   
   /* Code for Process 0 */
  if (my_rank == 0) {
         sequential = atoi(argv[1]);   /* Sequential 1 - Parallel !=1 */
         array_len = atoi(argv[2]);    /* Array dimension on compute the max*/
         MPI_Comm_size(MPI_COMM_WORLD, &amp;num_proc);

         /* Get values needed for subarray sizes */
         quotient = array_len / num_proc; /*P part of N/P elements*/
         rem = array_len % num_proc; /*Number of processes that need an additional element*/

         generate_data(search_array,array_len);
       
         if (sequential)
            printf("The sequential search gives %d\n",
                      find_max(search_array,array_len));
	
         /* Some subarrays may be larger */
         for (rank=1; rank &lt; rem; ++rank){
             sub_len = quotient+1;
						 /*rank * quotient, is the number of element in the part before your part
							 + rank how many part of size 1 is before you?*/
             sub_start = rank*quotient+rank;
             MPI_Send(&amp;sub_len,1,MPI_INT,rank,0,MPI_COMM_WORLD);
             MPI_Send(&amp;(search_array[sub_start]),sub_len, MPI_INT, 
             rank, 0, MPI_COMM_WORLD);
          }
         for (rank=rem; rank &lt; num_proc; ++rank){
             sub_len = quotient;
						 /*rank * quotient, is the number of element in the part before your part
							 + rem how many part of size 1 is before you?*/
             sub_start = rank*quotient+rem;
               /* Send the process its subarray length */
             MPI_Send(&amp;sub_len,1,MPI_INT,rank,0,MPI_COMM_WORLD);
               /* And send the subarray */
             MPI_Send(&amp;(search_array[rank*quotient+rem]),quotient, 
                                 MPI_INT, rank, 0, MPI_COMM_WORLD);
		 }

		 /* Find my local max */
        if (rem==0)
              sub_len=quotient;
          else sub_len=quotient+1;
        global_max = find_max(search_array,quotient+1);

        /* Get back the maxima from the others */
        for (rank=1;rank&lt;num_proc;++rank){
             MPI_Recv(&amp;local_max,1,MPI_INT,MPI_ANY_SOURCE,0,
                            MPI_COMM_WORLD, &amp;status);
             if (local_max &gt; global_max)
                  global_max = local_max;
        }
        /* Display the global max */
        printf("The parallel search gives %d\n", global_max);
    }
   else {    /* Code for other processes */
	 /* Receive my subarray length */
        MPI_Recv(&amp;sub_len,1,MPI_INT,0,0,MPI_COMM_WORLD,&amp;status);
		/* And receive the subarray */
        MPI_Recv(search_array,sub_len,MPI_INT,0,0,MPI_COMM_WORLD,
				 &amp;status);
        my_max = find_max(search_array,sub_len);
        /* Send back my local max */
	    MPI_Send(&amp;my_max,1,MPI_INT,0,0,MPI_COMM_WORLD);
    }
         
               
  MPI_Finalize();              /* And close up MPI  */
	return 0;
}
</code></pre></div></div>]]></content><author><name></name></author><category term="teaching"/><summary type="html"><![CDATA[Parallel Max of Integer Array]]></summary></entry><entry><title type="html">Counting Sort Sequential vs Parallel</title><link href="https://spagnuolocarmine.github.io/blog/2019/counting-sort/" rel="alternate" type="text/html" title="Counting Sort Sequential vs Parallel"/><published>2019-02-04T00:00:00+00:00</published><updated>2019-02-04T00:00:00+00:00</updated><id>https://spagnuolocarmine.github.io/blog/2019/counting-sort</id><content type="html" xml:base="https://spagnuolocarmine.github.io/blog/2019/counting-sort/"><![CDATA[<p>Counting sort is an efficient algorithm for sorting an array of elements that each have a nonnegative integer key, for example, an array, sometimes called a list, of positive integers could have keys that are just the value of the integer as the key, or a list of words could have keys assigned to them by some scheme mapping the alphabet to integers (to sort in alphabetical order, for instance). Unlike other sorting algorithms, such as mergesort, counting sort is an integer sorting algorithm, not a comparison based algorithm.</p> <p>The complexity of the algorithm is <code class="language-plaintext highlighter-rouge">Theta(n)</code>.</p> <p><em>*An algorithm that maps the following input/output pair is called a sorting algorithm:</em> *</p> <ul> <li>Input: An array, A, of size of orderable elements. <code class="language-plaintext highlighter-rouge">A[0,1,...,n-1]</code>.</li> <li>Output: A sorted permutation of A, called B, such that <code class="language-plaintext highlighter-rouge">B[0]&lt;=B[1]..&lt;=B[n-1]</code>.</li> </ul> <h3 id="counting-sort-sequential">Counting Sort Sequential</h3> <p>Counting sort assumes that each of the <em>n</em> input elements in a list has a key value ranging from <em>0</em> to <em>k</em>, for some integer <em>k</em>. For each element in the list, counting sort determines the number of elements that are less than it. Counting sort can use this information to place the element directly into the correct slot of the output array.</p> <p>Counting sort uses three lists:</p> <ul> <li><code class="language-plaintext highlighter-rouge">A[0,1, ...,n]</code> the input list.</li> <li><code class="language-plaintext highlighter-rouge">B[0,1, ...,n]</code> the output list.</li> <li><code class="language-plaintext highlighter-rouge">C[0,1, ...,k]</code> an temporany memory array.</li> </ul> <p><strong>Algorithm</strong></p> <ul> <li>Compute the min and the max of the arrat <em>A</em> in order to define <code class="language-plaintext highlighter-rouge">k= max - min + 1</code>.</li> <li>For all element in <code class="language-plaintext highlighter-rouge">A[i],0&lt;=i&lt;=n-1</code>, the counting sort, incremente the value <code class="language-plaintext highlighter-rouge">C[A[i]-min]</code> by one. For instance consider that the value <em>1</em> in the array <em>A</em> appears <em>8</em> times the value <code class="language-plaintext highlighter-rouge">C[1]=8</code>.</li> <li>Update the status of <em>C</em> with <code class="language-plaintext highlighter-rouge">C[i]=C[i]+C[i-1], 1&lt;=i&lt;=k</code>.</li> <li>Sort <em>A</em> in <em>B</em> according to <code class="language-plaintext highlighter-rouge">C[A[i]], 1&lt;=i&lt;=k</code> and decrement the value of <code class="language-plaintext highlighter-rouge">C[A[i]]</code> after each update.</li> </ul> <p><img src="https://raw.githubusercontent.com/spagnuolocarmine/spagnuolocarmine.github.io/master/assets/img/count.gif" alt="Counting Sort"/></p> <h3 id="counting-sort-parallel">Counting Sort Parallel</h3> <p>Bsed on the idea of sequential counting sort. Uses <code class="language-plaintext highlighter-rouge">n^2</code> processors on a mesh grid of <code class="language-plaintext highlighter-rouge">n x n</code>. Running time complexity <code class="language-plaintext highlighter-rouge">O(logn)</code>.</p> <p><img src="https://raw.githubusercontent.com/spagnuolocarmine/spagnuolocarmine.github.io/2019/assets/img/coutingpar.png" alt="Counting Sort"/></p>]]></content><author><name></name></author><category term="news"/><summary type="html"><![CDATA[Counting sort is an efficient algorithm for sorting an array of elements that each have a nonnegative integer key, for example, an array, sometimes called a list, of positive integers could have keys that are just the value of the integer as the key, or a list of words could have keys assigned to them by some scheme mapping the alphabet to integers (to sort in alphabetical order, for instance). Unlike other sorting algorithms, such as mergesort, counting sort is an integer sorting algorithm, not a comparison based algorithm.]]></summary></entry><entry><title type="html">DMASON Project</title><link href="https://spagnuolocarmine.github.io/blog/2019/dmason/" rel="alternate" type="text/html" title="DMASON Project"/><published>2019-01-31T00:00:00+00:00</published><updated>2019-01-31T00:00:00+00:00</updated><id>https://spagnuolocarmine.github.io/blog/2019/dmason</id><content type="html" xml:base="https://spagnuolocarmine.github.io/blog/2019/dmason/"><![CDATA[ <script async="" defer="" src="https://buttons.github.io/buttons.js"></script> <h2 id="dmason">DMASON</h2> <p>DMASON is a parallel version of the <a href="http://cs.gmu.edu/~eclab/projects/mason/">MASON</a> library for writing and running simulations of Agent based simulation models.</p> <p>Agent-based simulation models are an increasingly popular tool for research and management in many, different and diverse Ô¨Åelds. In executing such simulations the ‚Äúspeed‚Äù is one of the most general and important issues. The traditional answer to this issue is to invest resources in deploying a dedicated installation of dedicated computers. D-MASON is a parallel version of the MASON, a library for writing and running Agent-Based simulations.</p> <p><a class="github-button" href="https://github.com/isislab-unisa/dmason/archive/master.zip" data-icon="octicon-cloud-download" data-size="large" aria-label="Download D-MASON on GitHub">Download</a> <a class="github-button" href="https://github.com/isislab-unisa/dmason" data-icon="octicon-star" data-size="large" data-show-count="true" aria-label="Star D-MASON on GitHub">Star</a></p>]]></content><author><name></name></author><category term="project"/><summary type="html"><![CDATA[DMASON]]></summary></entry><entry><title type="html">FLY Language Project</title><link href="https://spagnuolocarmine.github.io/blog/2019/fly/" rel="alternate" type="text/html" title="FLY Language Project"/><published>2019-01-31T00:00:00+00:00</published><updated>2019-01-31T00:00:00+00:00</updated><id>https://spagnuolocarmine.github.io/blog/2019/fly</id><content type="html" xml:base="https://spagnuolocarmine.github.io/blog/2019/fly/"><![CDATA[ <script async="" defer="" src="https://buttons.github.io/buttons.js"></script> <h1 id="fly-programming-language">FLY programming language</h1> <p>FLY is an open source Domain Specific Language for scientific computing on the cloud exploiting FaaS.</p> <p><a class="github-button" href="https://github.com/spagnuolocarmine/FLY-language/archive/master.zip" data-icon="octicon-cloud-download" data-size="large" aria-label="Download FLY on GitHub">Download</a> <a class="github-button" href="https://github.com/spagnuolocarmine/FLY-language" data-icon="octicon-star" data-size="large" data-show-count="true" aria-label="Star FLY on GitHub">Star</a></p>]]></content><author><name></name></author><category term="project"/><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Open-Source Serverless Architecture Project</title><link href="https://spagnuolocarmine.github.io/blog/2019/serverless/" rel="alternate" type="text/html" title="Open-Source Serverless Architecture Project"/><published>2019-01-31T00:00:00+00:00</published><updated>2019-01-31T00:00:00+00:00</updated><id>https://spagnuolocarmine.github.io/blog/2019/serverless</id><content type="html" xml:base="https://spagnuolocarmine.github.io/blog/2019/serverless/"><![CDATA[ <script async="" defer="" src="https://buttons.github.io/buttons.js"></script> <h1 id="serverless-computing-for-iot">Serverless Computing for IoT</h1> <p>Serverless computing is a cloud-computing execution model in which the cloud provider acts as the server, dynamically managing the allocation of machine resources. Serverless Computing exploits Function as a service (FaaS) that is a category of cloud computing services that provides a platform allowing customers to develop, run, and manage application functionalities without the complexity of building and maintaining the infrastructure typically associated with developing and launching an app.Building an application following this model is one way of achieving a ‚Äúserverless‚Äù architecture, and is typically used when building microservices applications.</p> <p>The Internet of things (IoT) is the network of physical devices, vehicles, home appliances, and other items embedded with electronics, software, sensors, actuators, and connectivity which enables these things to connect, collect and exchange data.</p> <p>We are interest to efficiently collect and elaborate this data, and produce new data as answer to particular condition computed from the data received. Cloud architectures provides an efficient methods to build this kind of applications.</p> <p align="center"><img src="https://github.com/spagnuolocarmine/serverless-computing-for-iot/blob/master/assets/iot-architecture.png?raw=true" width="1000"/></p> <h4 id="tutorial-structure">Tutorial Structure</h4> <ul> <li><strong><a href="#audience">Audience</a></strong></li> <li><strong><a href="#prerequisites">Prerequisites</a></strong></li> <li><strong><a href="#installation">Installation</a></strong></li> <li><strong><a href="#examples">Examples</a></strong></li> </ul> <h2 id="audience">Audience</h2> <p>This tutorial is designed for building a computing architecture, based on open-source software, that allows the users to exploit Function-as-service model in the context of IoT. The idea is provides a system which allows as in Amazon Aws or Microsoft Azure, and so on, to deploy functions that are trigged by events generated from small devices such as sensors and mobile (IoT devices), commonly these devices communicates using message-passing, in particular on dedicated protocols as AMQP or MQTT.</p> <p>The end of this tutorial provides example that deploy a function able to log the temperature value received by a sensor on the AMQP protocol, in this example the events are generated by another function executed on the system or outside (this is a semplification, but it is easily to test using a real device that allows to send messages on AMQP protocol).</p> <h2 id="prerequisites">Prerequisites</h2> <ul> <li>OS: <ul> <li>Ubuntu 18.04 LTS</li> </ul> </li> <li>Software: <ul> <li>Docker and Docker Compose (Application containers engine)</li> <li>Nuclio (Serverless computing provider)</li> <li>RabbitMQ (AMQP and MQTT message broker)</li> <li>Node.js</li> </ul> </li> </ul> <h2 id="installation">Installation</h2> <p>This tutorial is made on top of one local machine an Linux Ubuntu 18.04 LTS machine.</p> <h3 id="docker">Docker</h3> <p>Docker is a tool designed to make it easier to create, deploy, and run applications by using containers. Containers allow a developer to package up an application with all of the parts it needs, such as libraries and other dependencies, and ship it all out as one package. By doing so, thanks to the container, the developer can rest assured that the application will run on any other Linux machine regardless of any customized settings that machine might have that could differ from the machine used for writing and testing the code.</p> <p>In a way, Docker is a bit like a virtual machine. But unlike a virtual machine, rather than creating a whole virtual operating system, Docker allows applications to use the same Linux kernel as the system that they‚Äôre running on and only requires applications be shipped with things not already running on the host computer. This gives a significant performance boost and reduces the size of the application.</p> <p><strong>TIP</strong> Docker is used in the architecture to deploy the function in an application container, each function is a Docker container that is listening on a socket port and can be invoked by an HTTP request, or by other triggers.</p> <p>Install Docker using the Docker CE installation <a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/#extra-steps-for-aufs">guide</a>.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>apt-get update
<span class="nv">$ </span><span class="nb">sudo </span>apt-get <span class="nb">install</span> <span class="se">\</span>
    apt-transport-https <span class="se">\</span>
    ca-certificates <span class="se">\</span>
    curl <span class="se">\</span>
    software-properties-common
<span class="nv">$ </span>curl <span class="nt">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg | <span class="nb">sudo </span>apt-key add -
<span class="nv">$ </span><span class="nb">sudo </span>apt-key fingerprint 0EBFCD88
<span class="nv">$ </span><span class="nb">sudo </span>add-apt-repository <span class="se">\</span>
   <span class="s2">"deb [arch=amd64] https://download.docker.com/linux/ubuntu </span><span class="se">\</span><span class="s2">
   </span><span class="si">$(</span>lsb_release <span class="nt">-cs</span><span class="si">)</span><span class="s2"> </span><span class="se">\</span><span class="s2">
   stable"</span>
<span class="nv">$ </span><span class="nb">sudo </span>apt-get update
<span class="nv">$ </span><span class="nb">sudo </span>apt-get <span class="nb">install </span>docker-ce
</code></pre></div></div> <p><strong>IMPORTANT FIX</strong> Ubuntu 18.04 changed to use systemd-resolved to generate /etc/resolv.conf. Now by default it uses a local DNS cache 127.0.0.53. That will not work inside a container, so Docker will default to Google‚Äôs 8.8.8.8 DNS server, which may break for people behind a firewall. Refers to the <a href="https://stackoverflow.com/questions/20430371/my-docker-container-has-no-internet">Stackoverflow discussion</a>.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo ln</span> <span class="nt">-sf</span> /run/systemd/resolve/resolv.conf /etc/resolv.conf
</code></pre></div></div> <hr/> <h3 id="docker-compose">Docker Compose</h3> <p>Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application‚Äôs services.</p> <p><strong>TIP</strong> Docker compose is the technology used by Nuclio to easily create, build and deploy Docker application containers (the functions in this case).</p> <p>Install Docker Compose using the Docker Compose installation <a href="https://docs.docker.com/compose/install/#install-compose">guide</a>.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>curl <span class="nt">-L</span> <span class="s2">"https://github.com/docker/compose/releases/download/1.22.0/docker-compose-</span><span class="si">$(</span><span class="nb">uname</span> <span class="nt">-s</span><span class="si">)</span><span class="s2">-</span><span class="si">$(</span><span class="nb">uname</span> <span class="nt">-m</span><span class="si">)</span><span class="s2">"</span> <span class="nt">-o</span> /usr/local/bin/docker-compose
<span class="nv">$ </span><span class="nb">sudo chmod</span> +x /usr/local/bin/docker-compose
</code></pre></div></div> <hr/> <h3 id="nuclio">Nuclio</h3> <p>Nuclio (High-Performance Serverless event and data processing platform) is a new ‚Äúserverless‚Äù project, derived from Iguazio‚Äôs elastic data life-cycle management service for high-performance events and data processing. The simplest way to explore Nuclio is to run its graphical user interface (GUI) of the Nuclio dashboard.</p> <p><strong>TIP</strong> The Nuclio documentation is available at <a href="https://nuclio.io/docs/latest/">this link</a>.</p> <p>Start <a href="https://github.com/nuclio/nuclio">Nuclio</a> using a docker container.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker run <span class="nt">-p</span> 8070:8070 <span class="nt">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="nt">-v</span> /tmp:/tmp nuclio/dashboard:stable-amd64
</code></pre></div></div> <p>Browse to http://localhost:8070, create a project, and add a function. When run outside of an orchestration platform (for example, Kubernetes or Swarm), the dashboard will simply deploy to the local Docker daemon.</p> <p><strong>TIP</strong> Nuclio provide also the nctcl application client that allows to basically execute the same operation of Nuclio dashboard.</p> <hr/> <h3 id="rabbitmq">RabbitMQ</h3> <p>RabbitMQ is lightweight and easy to deploy on premises and in the cloud. It supports multiple messaging protocols. RabbitMQ can be deployed in distributed and federated configurations to meet high-scale, high-availability requirements.</p> <p>Start <a href="https://www.rabbitmq.com">RabbitMQ</a> instance with MQTT enabled using docker.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>docker run <span class="nt">-p</span> 9000:15672  <span class="nt">-p</span> 1883:1883 <span class="nt">-p</span> 5672:5672  cyrilix/rabbitmq-mqtt 
</code></pre></div></div> <p>Browse to http://localhost:9000, and login using username: guest and password: guest, to access to the RabbitMQ managment, where is possible to visualize the message queues and the broker status.</p> <hr/> <h4 id="library-for-amqp-and-mqtt-clients">Library for AMQP and MQTT clients</h4> <p>There are different libraries for many languages for interacting with protocol AMQP and MQTT you can use what you want. For JavScript AMQP we used this <a href="https://github.com/squaremo/amqp.node">library</a>, while for JavaScript MQTT we used this <a href="https://github.com/mqttjs/MQTT.js">library</a>.</p> <h2 id="examples">Examples</h2> <ul> <li><a href="https://github.com/spagnuolocarmine/serverless-computing-for-iot/blob/master/iot/amqp/temperature">Temperature using AMQP</a></li> <li><a href="https://github.com/spagnuolocarmine/serverless-computing-for-iot/blob/master/iot/mqtt/temperature">Temperature using MQTT</a></li> </ul> <h3 id="mqtt-android-clients">MQTT Android Clients</h3> <p>We used a general purpose <a href="https://play.google.com/store/apps/details?id=in.dc297.mqttclpro">MQTT client</a> for Android.</p> <hr/> <h2 id="docker-tips">Docker TIPS</h2> <p>In this section are presentented several Docker useful commands:</p> <ul> <li>Docker container ID: <code class="language-plaintext highlighter-rouge">sudo docker ps -a</code>, displays all deployed containers, rember that functions are Docker containers, the IMAGE field is the function name and version, while the CONTAINER ID is the ID of the function. In this view is also possible to see the listening port for the function in the field PORTS.</li> <li>Docker Logs: <code class="language-plaintext highlighter-rouge">sudo docker logs CONTAINER ID</code>, displays the STDOUT and STDERR of the associated container.</li> <li>Docker Kill: <code class="language-plaintext highlighter-rouge">sudo docker kill CONTAINER ID</code>, kills the associated container.</li> <li>Docker Remove: <code class="language-plaintext highlighter-rouge">sudo docker rm CONTAINER ID</code>, removes the associated container.</li> </ul> <hr/> <p><a class="github-button" href="https://github.com/spagnuolocarmine/serverless-computing-for-iot/archive/master.zip" data-icon="octicon-cloud-download" data-size="large" aria-label="Download spagnuolocarmine/serverless-computing-for-iot on GitHub">Download</a> <a class="github-button" href="https://github.com/spagnuolocarmine/serverless-computing-for-iot" data-icon="octicon-star" data-size="large" data-show-count="true" aria-label="Star spagnuolocarmine/serverless-computing-for-iot on GitHub">Star</a></p>]]></content><author><name></name></author><category term="project"/><summary type="html"><![CDATA[Serverless Computing for IoT]]></summary></entry><entry><title type="html">Simulation Optimization Framework Project</title><link href="https://spagnuolocarmine.github.io/blog/2019/sof/" rel="alternate" type="text/html" title="Simulation Optimization Framework Project"/><published>2019-01-31T00:00:00+00:00</published><updated>2019-01-31T00:00:00+00:00</updated><id>https://spagnuolocarmine.github.io/blog/2019/sof</id><content type="html" xml:base="https://spagnuolocarmine.github.io/blog/2019/sof/"><![CDATA[ <script async="" defer="" src="https://buttons.github.io/buttons.js"></script> <h2 id="sof-zero-configuration-simulation-optimization-framework-on-the-cloud">SOF: Zero Configuration Simulation Optimization Framework on the Cloud</h2> <p>Simulation models are becoming an increasingly popular tool for the analysis and optimization of complex real systems in different fields. Finding an optimal system design requires performing a large parameter sweep. Hence, the model tuning process is extremely demanding from a computational point of view, as it requires careful, time-consuming, complex orchestration of coordinated executions. In this paper, we present the design of SOF (Simulation Optimization and exploration framework on the cloud), a framework which exploits the computing power of a cloud computational environment in order to realize effective and efficient simulation optimization strategies.</p> <p>SOF offers several attractive features: firstly, SOF requires ‚Äú<strong>zero configuration</strong>‚Äù as it does not require <em>any</em> additional software installed on the remote node (only standard <a href="http://hadoop.apache.org/">Apache Hadoop</a> and a SSH access are sufficient). Secondly, SOF is transparent to the user, since the user is totally unaware that system operates on a distributed environment. Finally, SOF is highly customizable and programmable, since it enables the running of different simulation toolkits and/or the ability to exploit diverse programming languages ‚Äì provided that the hosting platform support them ‚Äì under two different simulation optimization scenarios, as developed by the modeler.</p> <p>The framework core has been fully developed and is available under the Apache public licence. It has been tested and validated on several private platforms, such as a dedicated cluster of workstations, as well as on public platforms, including the Hortonworks Data Platform (<a href="http://hortonworks.com/">Hortonworks</a>).</p> <p>SOF was designed in <a href="http://www.isislab.it">ISISLab</a> and allows the simulation modeller to run and collect results in two kinds of scenario parameter space exploration (PSE) and simulation optimization (SO) considering the computational resources as available for a not fixed time and subjects to failure.</p> <p>SOF was designed to manage three kinds of simulation engine: <a href="http://cs.gmu.edu/~eclab/projects/mason/">MASON</a>, <a href="https://ccl.northwestern.edu/netlogo/">NetLogo</a> and a generic simulator. SOF provides some software facilities for the first simulators like the automatic simulation input setting and automatic output generating (that does not provide for the generic simulator, for obvious reasons). The generic simulator must be an executable compliant with the cluster machine used.</p> <p>SOF is a framework to exploit simulation optimization on Hadoop cluster. SOF is divided in two main functional blocks: core and client. The core component provides all functionality to write out Java based client application. The client is a command line Java application that shown the features of the core component and allows to execute PSE and SO process on a <a href="http://hadoop.apache.org/">Apache Hadoop</a> cluster.</p> <p><a class="github-button" href="https://github.com/isislab-unisa/sof/archive/master.zip" data-icon="octicon-cloud-download" data-size="large" aria-label="Download Simulation Optimization Framework on GitHub">Download</a> <a class="github-button" href="https://github.com/isislab-unisa/sof" data-icon="octicon-star" data-size="large" data-show-count="true" aria-label="Star Simulation Optimization Framework on GitHub">Star</a></p>]]></content><author><name></name></author><category term="project"/><summary type="html"><![CDATA[SOF: Zero Configuration Simulation Optimization Framework on the Cloud]]></summary></entry><entry><title type="html">Twenty Second CV in LaTex</title><link href="https://spagnuolocarmine.github.io/blog/2019/twenty-second-project/" rel="alternate" type="text/html" title="Twenty Second CV in LaTex"/><published>2019-01-31T00:00:00+00:00</published><updated>2019-01-31T00:00:00+00:00</updated><id>https://spagnuolocarmine.github.io/blog/2019/twenty-second-project</id><content type="html" xml:base="https://spagnuolocarmine.github.io/blog/2019/twenty-second-project/"><![CDATA[ <script async="" defer="" src="https://buttons.github.io/buttons.js"></script> <h2 id="twenty-second-cv-in-latex">Twenty Second CV in LaTex</h2> <p>A curriculum vitae, otherwise known as a CV or r√©sum√©, is a document used by individuals to communicate their work history, education and skill set. This is a style template for your curriculum written in LaTex. The main goal of this template is to provide a curriculum that is able to survive to the r√©sum√©s screening of ‚Äútwenty seconds‚Äù.</p> <p>The author assumes no responsibility for the topicality, correctness, completeness or quality of the information provided and for the obtained r√©sum√©s.</p> <p>This is designed for computer scientists but there is no limitation to use it for r√©sum√©s in other disciplines.</p> <p><a class="github-button" href="https://github.com/spagnuolocarmine/TwentySecondsCurriculumVitae-LaTex/archive/master.zip" data-icon="octicon-cloud-download" data-size="large" aria-label="Download spagnuolocarmine/TwentySecondsCurriculumVitae-LaTex on GitHub">Download</a> <a class="github-button" href="https://github.com/spagnuolocarmine/TwentySecondsCurriculumVitae-LaTex" data-icon="octicon-star" data-size="large" data-show-count="true" aria-label="Star spagnuolocarmine/TwentySecondsCurriculumVitae-LaTex on GitHub">Star</a></p>]]></content><author><name></name></author><category term="project"/><summary type="html"><![CDATA[Twenty Second CV in LaTex]]></summary></entry></feed>